import requests
from bs4 import BeautifulSoup

# Configura√ß√£o de cabe√ßalho para simular um navegador real
HEADERS = {"User-Agent": "Mozilla/5.0"}

# Cap Rate m√©dio por tipo de FII
CAP_RATE_MEDIO = {
    "Escrit√≥rios": (6, 9),
    "Galp√µes Log√≠sticos": (7, 10),
    "Shopping Centers": (5, 8),
    "Lajes Corporativas": (6, 9),
    "Fundos de Papel (CRIs)": (10, 15),
    "Fundos de Desenvolvimento": (10, 20),
    "Im√≥veis Residenciais": (4, 7),
    "Im√≥veis Comerciais": (6, 10)
}

# Dicion√°rio de nomes personalizados para os campos coletados
DADOS_FII = {
    "Cota√ß√£o": "Cota√ß√£o Atual",
    "P/VP": "P/VP",
    "Liquidez Di√°ria": "Liquidez M√©dia Di√°ria",
    "DY (12M)": "Dividend Yield (12M)",
    "√öltimo Rendimento": "√öltimo Rendimento",
    "Vac√¢ncia": "Vac√¢ncia (%)",
    "Cap Rate": "Cap Rate (%)",
    "Patrim√¥nio L√≠quido": "Patrim√¥nio L√≠quido",
    "N√∫mero de Ativos": "Quantidade de Im√≥veis",
}

def get_fii_data_fundsexplorer(fii):
    """Coleta indicadores de um Fundo Imobili√°rio no Funds Explorer."""
    url = f"https://www.fundsexplorer.com.br/funds/{fii.lower()}"
    response = requests.get(url, headers=HEADERS)
    if response.status_code != 200:
        return {}

    soup = BeautifulSoup(response.text, "html.parser")
    data = {}

    # Extraindo informa√ß√µes do Funds Explorer
    mapeamento = {
        "liquidezMediaDiaria": "Liquidez Di√°ria",
        "patrimonioLiquido": "Patrim√¥nio L√≠quido",
        "vacancia": "Vac√¢ncia",
        "numeroImoveis": "N√∫mero de Ativos",
        "yieldAnual": "Dividend Yield (12M)",
        "pvp": "P/VP"
    }

    for li in soup.select("ul.comparator__cols__list--data li"):
        key = li.get("data-row", "").strip()
        value = li.get_text(strip=True)
        if key in mapeamento:
            data[mapeamento[key]] = convert_to_number(value)

    # Pegando Cota√ß√£o e √öltimo Rendimento para c√°lculo do Cap Rate
    cotacao_element = soup.find("div", class_="headerTicker__content__price")
    if cotacao_element:
        cotacao = cotacao_element.find("p")
        if cotacao:
            data["Cota√ß√£o"] = convert_to_number(cotacao.get_text(strip=True).replace("R$", ""))

    for box in soup.find_all("div", class_="indicators__box"):
        p_label = box.find("p")
        if p_label and "√öltimo Rendimento" in p_label.get_text():
            b_val = box.find("b")
            if b_val:
                data["√öltimo Rendimento"] = convert_to_number(b_val.get_text(strip=True))

    return data

def get_fii_data_investidor10(fii):
    """Coleta indicadores de um Fundo Imobili√°rio no Investidor10."""
    url = f"https://investidor10.com.br/fiis/{fii.lower()}"
    response = requests.get(url, headers=HEADERS)
    if response.status_code != 200:
        return {}

    soup = BeautifulSoup(response.text, "html.parser")
    data = {}

    try:
        # Extra√ß√£o de DY Atual do Investidor10
        dy_element = soup.find("div", class_="compare-value")
        if dy_element:
            text = dy_element.get_text(strip=True)
            if "DY (12M)" in text:
                data["DY (12M)"] = convert_to_number(text.split(":")[-1].strip())

        # Extra√ß√£o de Vac√¢ncia
        vacancia_element = soup.find("h3", string="Vac√¢ncia")
        if vacancia_element:
            data["Vac√¢ncia"] = convert_to_number(vacancia_element.find_next("p").text.replace("%", ""))

    except AttributeError:
        pass

    return data

def convert_to_number(value):
    """Converte valores formatados (K, M, B, %, R$) para float"""
    if not value:
        return None
    value = value.replace(".", "").replace(",", ".").replace("%", "").strip()
    if "K" in value:
        return float(value.replace("K", "")) * 1e3
    elif "M" in value:
        return float(value.replace("M", "")) * 1e6
    elif "B" in value:
        return float(value.replace("B", "")) * 1e9
    elif "R$" in value:
        return float(value.replace("R$", "").strip())
    try:
        return float(value)
    except ValueError:
        return None

def calcular_cap_rate(ultimo_rendimento, cotacao):
    """Calcula o Cap Rate"""
    if ultimo_rendimento and cotacao:
        receita_anual = ultimo_rendimento * 12
        return round((receita_anual / cotacao) * 100, 2)
    return None

def avaliar_fii(data):
    """Avalia se o FII atende aos crit√©rios de investimento e gera uma nota"""
    criterios = {
        "Liquidez Di√°ria": lambda x: x is not None and x >= 500_000,
        "Patrim√¥nio L√≠quido": lambda x: x is not None and x >= 500_000_000,
        "Vac√¢ncia": lambda x: x is not None and x <= 10,
        "N√∫mero de Ativos": lambda x: x is not None and x >= 5,
        "DY (12M)": lambda x: x is not None and x >= 6,
        "P/VP": lambda x: x is not None and 0.85 <= x <= 1.15
    }

    analise = {}
    pontuacao = 0

    for crit, func in criterios.items():
        valor = data.get(crit, None)
        aprovado = func(valor)
        analise[DADOS_FII.get(crit, crit)] = f"‚úÖ Atende ({valor})" if aprovado else f"‚ùå N√£o atende ({valor})"
        if aprovado:
            pontuacao += 1

    nota_fii = round((pontuacao / len(criterios)) * 10, 2)
    return analise, nota_fii

if __name__ == "__main__":
    fii = input("Digite o c√≥digo do FII: ")

    # Coleta dados de ambos os sites
    dados_fundsexplorer = get_fii_data_fundsexplorer(fii)
    dados_investidor10 = get_fii_data_investidor10(fii)

    # Mescla os dados das duas fontes
    dados = dados_fundsexplorer or {}
    for key, value in (dados_investidor10 or {}).items():
        if key not in dados or dados[key] is None:
            dados[key] = value

            # C√°lculo do Cap Rate usando √öltimo Rendimento e Cota√ß√£o
    cap_rate = calcular_cap_rate(dados.get("√öltimo Rendimento"), dados.get("Cota√ß√£o"))
    dados["Cap Rate"] = cap_rate

    # Exibir dados
    print("\nüìä **Dados coletados:**")
    for key, value in dados.items():
        print(f"üìå {DADOS_FII.get(key, key)}: {value}")

    print("\nüìà **An√°lise de Investimento:**")
    analise, nota_fii = avaliar_fii(dados)
    for key, value in analise.items():
        print(f"{key}: {value}")

    print(f"\n‚≠ê **Nota Final do FII: {nota_fii}/10** ‚≠ê")
