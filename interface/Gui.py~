import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from func.Utils import format_large_numbers
from func import WebScraping, RelatorioPDF

def obter_dados_fii(event=None):
    """Obt√©m os dados do FII digitado pelo usu√°rio e exibe na interface gr√°fica."""
    fii = entrada_fii.get().strip().upper()
    if not fii:
        messagebox.showwarning("Entrada Inv√°lida", "Digite um c√≥digo de FII v√°lido.")
        return

    try:
        tipo_fii = WebScraping.get_fii_tipo_investidor10(fii)
        dados_fundsexplorer = WebScraping.get_fii_data_fundsexplorer(fii)
        dados_investidor10 = WebScraping.get_fii_data_investidor10(fii)

        # Mescla os dados das duas fontes
        dados = dados_fundsexplorer or {}
        for key, value in (dados_investidor10 or {}).items():
            if key not in dados or dados[key] is None:
                dados[key] = value

        # C√°lculo do Cap Rate
        cap_rate = WebScraping.calcular_cap_rate(dados.get("√öltimo Rendimento"), dados.get("Cota√ß√£o"))
        dados["Cap Rate"] = cap_rate

        # Avalia√ß√£o do investimento
        analise, nota_fii, recomendacao = WebScraping.avaliar_fii(dados)
        avaliacao_cap_rate = WebScraping.avaliar_cap_rate(tipo_fii, cap_rate)

        # Obt√©m dados do relat√≥rio PDF
        dados_relatorio = RelatorioPDF.parse_fii_report(fii)

        print(type(fii))

        # Atualiza a exibi√ß√£o na interface
        resultado_texto.config(state=tk.NORMAL)
        resultado_texto.delete(1.0, tk.END)
        resultado_texto.insert(tk.END, f"\nü§î Nome do FII: {fii}\n\n")
        resultado_texto.insert(tk.END, f"‚≠ê Nota Final do FII: {nota_fii}/10\n\n")
        resultado_texto.insert(tk.END, f"üîπ Tipo do FII: {tipo_fii}\n")
        resultado_texto.insert(tk.END, f"üëç Recomenda√ß√£o: {recomendacao}\n\n")
        resultado_texto.insert(tk.END, f"üìà Cap Rate: {cap_rate:.2f}%\n")
        resultado_texto.insert(tk.END, f"üîé {avaliacao_cap_rate}\n\n")
        resultado_texto.insert(tk.END, "üìä Dados coletados:\n")
        for k, v in dados.items():
            if v is not None:
                resultado_texto.insert(tk.END, f"üìå {WebScraping.DADOS_FII.get(k, k)}: {format_large_numbers(v)} ({v})\n")
        resultado_texto.insert(tk.END, "\nüìÑ Informa√ß√µes do Relat√≥rio PDF:\n")
        for k, v in dados_relatorio.items():
            resultado_texto.insert(tk.END, f"üìå {k}: {v}\n")
        resultado_texto.config(state=tk.DISABLED)

    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao coletar dados: {e}")

# Configura√ß√£o da interface gr√°fica
janela = tk.Tk()
janela.title("Analisador de Fundos Imobili√°rios")
janela.geometry("600x500")

# Campo de entrada para o c√≥digo do FII
tk.Label(janela, text="Digite o c√≥digo do FII:", font=("Arial", 12)).pack(pady=5)
entrada_fii = tk.Entry(janela, font=("Arial", 12), width=20)
entrada_fii.pack(pady=5)
entrada_fii.bind("<Return>", obter_dados_fii)  # Permite buscar ao pressionar Enter

# Bot√£o para buscar os dados
botao_buscar = tk.Button(janela, text="Buscar Dados", font=("Arial", 12), command=obter_dados_fii)
botao_buscar.pack(pady=10)

# √Årea de exibi√ß√£o dos resultados com scroll
frame_resultado = tk.Frame(janela)
frame_resultado.pack(pady=10, padx=10, fill="both", expand=True)

resultado_texto = scrolledtext.ScrolledText(frame_resultado, font=("Arial", 10), wrap=tk.WORD, height=20, state=tk.DISABLED)
resultado_texto.pack(fill="both", expand=True)

# Executa o loop da interface
tk.mainloop()